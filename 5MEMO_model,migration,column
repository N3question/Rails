＜migrationファイルとは＞
テーブルの作成や変更を管理するファイル
# このファイルに記述される内容によって、
# テーブル名やカラム名、テーブルの列などが決定します。


「（作成日時）_create_lists.rb」ファイルの名前を確認しましょう。
「lists」部分は、テーブル名です。


= （作成日時）create（テーブル名）.rb」
# テーブル名には、「モデル名の複数形」が自動的に割り振られます。
# コマンド実行時は「List」と単数形で書いたので、
# テーブル名は「lists」と複数形の英小文字になります。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
!Railsでは、命名の規則が厳密に決められています。!
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

＜モデルの命名規則＞
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
モデル名...単数形、先頭は英大文字	「List」

モデルのファイル名...単数形、先頭は英小文字	「list.rb」

テーブル名...複数形、先頭は英小文字	「lists」
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

＜migrationファイルを作成する＞
migrationファイルはモデルを作成した際に
自動生成されているので、あとは編集するだけ
ーーーーーーーーーーーーーーーーー
def change
  create_table :テーブル名 do |t|
    t.データ型 :カラム名　　　　　　←重要！
  end
end
ーーーーーーーーーーーーーーーーー

＜カラムの追加/削除＞
今後、新たに別のカラムを追加したい場合や、
誤った名前でカラムを追加してしまう場合もあると思います。

その場合は、以下のコマンドを参考に実行してみてください。
それぞれ新たに、追加や削除のためのMigrationファイルを作成するためのコマンドです。

ーーーーーーーーーーーーーーーーーーーーーーーーーー
[カラムの追加コマンド]
$ rails g migration Addカラム名Toテーブル名 カラム名:型名
# lists」テーブルに文字列型の「name」というカラムを追加したい場合

[カラムの削除コマンド]
$ rails g migration Removeカラム名Fromテーブル名 カラム名:型名
# 先ほど追加した「name」カラムを削除したい場合



＜まとめ＞
モデルとテーブルは連動している。
migrationファイルを使うと、テーブルの作成やカラムの追加・削除ができる。
モデルの作成は「rails g model モデル名」で行う
migrationファイルの作成時は、必ず「rails db:migrate」で実行する。
 migrationファイルを編集したい場合は、元のファイルを編集せずに
追加コマンドや削除コマンドでファイルを作成してから「rails db:migrate」する。