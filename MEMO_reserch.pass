＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
・必要なタイミングでパスを調べる方法について
○ Railsアプリにおいて「パス」とはどのような仕組みか
○ どのように「パス」を調べれば良いのか
・ルーティングとは
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

＜パスとは＞
今まで学んできたパス...ファイルやディレクトリの場所を指すもの
                       実際にアドレスバーに表示されるURLの一部

ーーーーーーーーーーーーーーーーーーーーーーーーーーーー
xxxxxxxx.amazonaws.com
ドメインと呼ばれ、「インターネット上の住所」を表す
/_static/index.html
パスと呼ばれ、「サーバー・アプリ内の場所」を表す

「https://」「ドメイン」「 /パス」をまとめたものがURL
ーーーーーーーーーーーーーーーーーーーーーーーーーーーー



Railsにおける「パス」...直接ファイル名を指定するのではなく、
                        入力されたパスに対して実行する処理(アクション)
                        を指定する仕組み

=「このパスが入力されたら、この処理を実行する」



＜ルーティングとは＞
★ルーティング...パスに対する処理(アクション)を結びつけること
例："/top"というパスに対してルーティングできている状態
ーーーーーーーーーー
/top ▷ homes # top
ーーーーーーーーーー　　
[解説]
/topにアクセスしたときに、homesのアクションを実行する設定になっている


＜パス入力後の処理の違い＞
　Webページ　　　|　　　　　　Rails
ーーーーーーーー | ーーーーーーーーーーーーー
ファイルのパス　 |　ルーティングで指定した
へアクセス　　　 |　パスへアクセス
ーーーーーーーー | ーーーーーーーーーーーーー
なし　　　　　　 |　ルーティングを確認する
ーーーーーーーー | ーーーーーーーーーーーーー
なし　　　　　　 |　ルーティングで確認した
　　　　　　　　 |　アクションを実行する
ーーーーーーーー | ーーーーーーーーーーーーー
指定された　　　 |　アクションに結びついた
ファイルを表示　 |　Viewファイルを使って
　　　　　　　　 |　ページを表示
　　　　　　　　 
　　　　　　　　 
＜パスを調べる"rails routes"コマンド＞
①ルーティングを指定するためにはroutes.rbの記述を変更する。
②routes.rbの中身を見る⏩既に指定しているルーティングを確認する。

！コードに誤りがある場合、ルーティングが想定通りになっていないことに気付けない場合があります。！
③それを確認するために必要なのがrails routesというコマンドです。



＜コントローラ名・アクション名の分け方＞
例)homes#topと書かれている場合
 # homesコントローラを探す
 # homesコントローラからtopアクションを探して実行する
という流れで処理が行われます。

 # homes...コントローラ名
 # top...アクション名
 
 ＜Verb(HTTPメソッド＞
 「サーバーに対してお願いしたい内容の種類」を表したもの
 
 　GET : 主にページを表示する時
　 POST：主にデータを新しく登録する時
 　PUT：主にデータを更新する時
 　DELETE：主にデータを削除する時


＜Prefix(名前)＞
実際にRailsアプリを実装していく時、
ページ内にリンクを作成していくことがありますが、
その都度パスを入力していくのが手間であることがあります。

そこで、パスの代わりにPrefixを使用することができます。 
パスにPrefixをつけることで、パスの代わりの名前となり、
コードの中で使用することができます。

例１
/topというパスに対するPrefixを確認してみると、
"top"となっています。 
この場合は、/topの代わりに"top"という記述を使用することができます。

例２
パスが/very_long_test_pathであった場合、
コーディングの都度このパスを入力するのは手間です。
そこで、Prefixを"test"とすることで、
コーディングの際に"test_path"と入力することで代わりになります。



＜パスを調べるタイミング＞
1.新しくルーティングを作ったとき
# 思った通りにパスとアクションが設定されているかを確認
# コーディングが一通り完了し、パスとアクションを設定し終わったタイミング
# 早い段階でミスを洗い出す

2.設定したはずのルーティングがうまく動作しない場合
# 開発を進めていく中で発生するエラーには様々な原因
# ルーティングが原因となる場合
# "No Route Matches"と表示されている場合は、
  パスやアクションの記述が誤っている場合
  


＜まとめ＞
パスを確認していくことは、実装中やエラー発生時に必要であり、Railsアプリの品質を上げるために重要な手順になります。
必要に応じて使いこなせるようになりましょう。