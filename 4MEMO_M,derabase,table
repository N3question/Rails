静的サイト...いつ誰がアクセスしても同じ内容が表示される。
             このようなサイトのこと。
             
動的サイト...ユーザーのアクセス状況によって
             表示内容が変わるサイト。
             
動的サイトを作るには、必要な情報を保存しておき、
状況に応じて抽出して表示させる仕組みが必要です。
この仕組み構築に必要な
M（モデル）と「データベース」について学んでいきましょう。

M...アプリケーション固有のデータや処理を扱う部分
# データベースにアクセスして、
# データの登録や取得、更新、削除などの処理を行います。
# app→modelsディレクトリ内にある「モデル名.rb」が、モデルのファイル

データベース...データを格納する保存先
# データベースを利用することで、データを効率的に保存
# 高速で検索できるようになります。

# ウェブアプリケーションに必要なさまざまなデータが格納
# Amazonのデータベースならば、
# 商品名、商品説明、価格、会員情報、購入履歴などのデータが格納

# Railsでは、これらのデータを「テーブル」にまとめ、複数のテーブルを関連付けて保存しています。
# たとえば、商品に関するデータは商品情報テーブルに格納し、
# 会員に関するデータは会員情報テーブルに格納する、といった具合に整理しています。

＜テーブルの構造＞
例　ブログでは、「タイトル」や「本文」、「投稿者」、
　　「投稿日」などを保存しておき、これらのデータをモニタ上に表示

テーブル...これらの情報を表形式で整理＆保存

＜レコードとカラム＞
ーカラムー
テーブルの縦1列のこと　例えば全てのタイトルのグループ
ーレコードー
テーブルの横1行のこと　例えばタイトルと本文の１セット

＜Railsで扱うテーブルの特徴＞
Railsでテーブルを作成すると、「id」のカラムが自動的に生成
# idのカラムには、id番号が順番に割り振られます。同じidは存在しないので、
# このidによってレコードの中身を特定できます

＜まとめ
Railsのモデルとは、データベースとやりとりをしてくれるもの
モデル → SQL → データベース
# モデルを使うことでデータベースとのやりとりが簡略化され、
# SQLを記述しなくてもデータベース内にテーブルを作成したり、
# データを取得したりすることができる
